version: 2.1

orbs:
  slack: circleci/slack@4.6.1
  snyk: snyk/snyk@1.1.2
  helm: circleci/helm@1.2.0
  newman: postman/newman@0.0.2

references:
  _save-requirements: &save-requirements
    save_cache:
      key: deps-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      paths:
        - "venv"

  _restore-requirements: &restore-requirements
    restore_cache:
      keys:
        - deps-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
        - deps-{{ .Branch }}

  _install-requirements: &install-requirements
    run:
      name: Install Requirements
      command: pipenv install --dev

  _login-ecr: &login-ecr
    run:
      name: ECR Login
      command: |
          login="$(AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION} AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} aws ecr get-login --no-include-email)"
          ${login}
  _authenticate-kubectl: &authenticate-kubectl
    run:
      name: Authenticate K8s
      command: |
          echo -n ${K8S_CLUSTER_CERT} | base64 -d > ./ca.crt
          kubectl config set-cluster ${K8S_CLUSTER_NAME} --certificate-authority=./ca.crt --server=${K8S_CLUSTER_URL}
          kubectl config set-credentials circleci --token=${K8S_TOKEN}
          kubectl config set-context ${K8S_CLUSTER_NAME} --cluster=${K8S_CLUSTER_NAME} --user=circleci --namespace=${K8S_NAMESPACE}
          kubectl config use-context ${K8S_CLUSTER_NAME}
          kubectl --namespace=${K8S_NAMESPACE} get pods
  _push-docker-image: &push-docker-image
    run:
      name: Tag and push images
      command: |
          docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}:${CIRCLE_SHA1}"
          docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}:${CIRCLE_SHA1}"
          case "${CIRCLE_BRANCH}" in
            main)
              docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}:latest"
              docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}:latest"
          esac
executors:
  build-image-executor:
    resource_class: small
    docker:
      - image: cimg/python:3.10.1

  cloud-platform-executor:
    resource_class: small
    docker:
      - image: ministryofjustice/cloud-platform-tools
        environment:
          GITHUB_TEAM_NAME_SLUG: laa-assess-a-claim
          REPO_NAME: laa-court-data-api

commands:
  install-requirements:
    steps:
      - *restore-requirements
      - *install-requirements
      - *save-requirements

  run-tests:
    steps:
      - run:
          name: run pytest
          command: pipenv run pytest --cov-report term --cov-report junitxml:test-results/cov.xml --cov=laa_court_data_api_app test
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: coverage

  build-docker-image:
    steps:
      - run:
          name: Compile Docker Image
          command: |
              docker build \
                --build-arg BUILD_DATE=$(date +%Y-%m-%dT%H:%M:%S%z) \
                --build-arg COMMIT_ID=${CIRCLE_SHA1} \
                --build-arg BUILD_TAG="app-${CIRCLE_SHA1}" \
                --build-arg APP_BRANCH=${CIRCLE_BRANCH} \
                --pull \
                --tag app \
                --file Dockerfile .
  deploy_to_environment:
    description: >
      Deploy image to the specified environment
    parameters:
      environment:
        description: Name of environment to deploy to
        type: string
    steps:
      - checkout
      - *login-ecr
      - *authenticate-kubectl
      - run:
          name: Deploy to namespace
          command: |
              helm upgrade laa-court-data-api ./helm_deploy/laa-court-data-api/. \
                  --install --wait --force \
                  --namespace=${K8S_NAMESPACE} \
                  --values ./helm_deploy/laa-court-data-api/values-<< parameters.environment >>.yaml \
                  --set image.repository="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}" \
                  --set image.tag="${CIRCLE_SHA1}" \
                  --atomic

jobs:
  lint-helm-config:
    executor: build-image-executor
    steps:
      - checkout
      - helm/install-helm-client:
          version: v3.7.2
      - run:
          command: |
            pushd ./helm_deploy/laa-court-data-api
            helm lint --values ./values-dev.yaml --values ./values-uat.yaml --values ./values-staging.yaml --values ./values-prod.yaml
          name: Lint charts for errors
  
  lint-python:
    executor: build-image-executor
    steps:
      - checkout
      - install-requirements
      - run:
          command:
            pipenv run pycodestyle .
          name: Lint Python

  test-app:
    executor: build-image-executor
    parallelism: 1
    steps:
      - checkout
      - install-requirements
      - run-tests

  build-and-push:
    executor: cloud-platform-executor
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.11
          docker_layer_caching: true
      - *login-ecr
      - build-docker-image
      - *push-docker-image

  scan-docker-image:
    executor: build-image-executor
    parallelism: 1
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.11
          docker_layer_caching: true
      - build-docker-image
      - snyk/scan:
          token-variable: SNYK_TOKEN
          docker-image-name: app
          target-file: ./Dockerfile
          organization: 'legal-aid-agency'
          project: ministryofjustice/laa-court-data-api
          severity-threshold: "high"
          fail-on-issues: true

  deploy-dev:
    executor: cloud-platform-executor
    steps:
      - deploy_to_environment:
          environment: dev

  postman-test-dev:
    executor: newman/postman-newman-docker
    steps:
      - checkout
      - newman/newman-run:
          collection: ./postman/collections/ping.postman_collection.json
          environment: ./postman/environments/dev.postman_environment.json
          additional-options: --env-var="Username=${DEV_BASIC_AUTH}"
      - newman/newman-run:
          collection: ./postman/collections/hearing_summaries.postman_collection.json
          environment: ./postman/environments/dev.postman_environment.json
          additional-options: --env-var="Username=${DEV_BASIC_AUTH}"
      - newman/newman-run:
          collection: ./postman/collections/defendants.postman_collection.json
          environment: ./postman/environments/dev.postman_environment.json
          additional-options: --env-var="Username=${DEV_BASIC_AUTH}"
      - newman/newman-run:
          collection: ./postman/collections/hearing.postman_collection.json
          environment: ./postman/environments/dev.postman_environment.json
          additional-options: --env-var="Username=${DEV_BASIC_AUTH}"
      - newman/newman-run:
          collection: ./postman/collections/hearing_events.postman_collection.json
          environment: ./postman/environments/dev.postman_environment.json
          additional-options: --env-var="Username=${DEV_BASIC_AUTH}"
      - newman/newman-run:
          collection: ./postman/collections/laa_references.postman_collection.json
          environment: ./postman/environments/dev.postman_environment.json
          additional-options: --env-var="Username=${DEV_BASIC_AUTH}"

workflows:
  version: 2
  pr-checks:
    jobs:
      - lint-helm-config:
          filters:
            branches:
              ignore:
                - main
      - lint-python:
          filters:
            branches:
              ignore:
                - main
      - test-app:
          filters:
            branches:
              ignore:
                - main
      - scan-docker-image:
          filters:
            branches:
              ignore:
                - main
      - build-and-push:
          requires:
            - test-app
            - scan-docker-image
      - hold-dev:
          type: approval
          requires:
            - build-and-push
      - deploy-dev:
          context: laa-court-data-api-live-dev
          requires:
            - hold-dev
      - postman-test-dev:
          requires:
            - deploy-dev

  main-deploy:
    jobs:
      - test-app:
          filters:
            branches:
              only:
                - main
      - scan-docker-image:
          filters:
            branches:
              only:
                - main
      - build-and-push:
          requires:
            - test-app
            - scan-docker-image
      - hold-dev:
          type: approval
          requires:
            - build-and-push
      - deploy-dev:
          context: laa-court-data-api-live-dev
          requires:
            - hold-dev
      - postman-test-dev:
          requires:
            - deploy-dev
